# Generated by Django 2.2.16 on 2022-08-30 02:48

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Обязательное поле. Введите название категории', max_length=256, verbose_name='Название категории')),
                ('slug', models.SlugField(help_text='Обязательное поле. Только латиница.', unique=True, verbose_name='Название категории')),
            ],
            options={
                'verbose_name': 'Категория произведения',
                'verbose_name_plural': 'Категории произведений',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Genre',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Обязательное поле. Введите название жанра', max_length=256, verbose_name='Название жанра')),
                ('slug', models.SlugField(help_text='Обязательное поле. Только латиница.', unique=True, verbose_name='Уникальное имя жанра')),
            ],
            options={
                'verbose_name': 'Жанр произведения',
                'verbose_name_plural': 'Жанры произведения',
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='GenresTitle',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('genre', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='reviews.Genre')),
            ],
            options={
                'verbose_name': 'Жанр произведения',
                'verbose_name_plural': 'Жанры произведений',
            },
        ),
        migrations.CreateModel(
            name='Title',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(verbose_name='Название произведения')),
                ('year', models.PositiveIntegerField(db_index=True, help_text='Год произведения не может превышать текущий.', validators=[django.core.validators.MaxValueValidator(2022)], verbose_name='Год выпуска')),
                ('description', models.TextField(verbose_name='Описание')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='category_titles', to='reviews.Category', verbose_name='Название категории')),
                ('genre', models.ManyToManyField(related_name='genre_titles', through='reviews.GenresTitle', to='reviews.Genre', verbose_name='Название жанра')),
            ],
            options={
                'verbose_name': 'Категория произведения',
                'verbose_name_plural': 'Категории произведений',
            },
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Введите текст ревью.', verbose_name='Текст ревью к произведению')),
                ('score', models.PositiveIntegerField(default=0, help_text='Введите значение от 1 до 10', validators=[django.core.validators.MaxValueValidator(10), django.core.validators.MinValueValidator(1)], verbose_name='Оценка произведению')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Ревью с автором', on_delete=django.db.models.deletion.CASCADE, related_name='author_reviews', to=settings.AUTH_USER_MODEL, verbose_name='Ревью автора')),
                ('title', models.ForeignKey(help_text='Ревью к произведению', on_delete=django.db.models.deletion.CASCADE, related_name='title_reviews', to='reviews.Title', verbose_name='Ревью к произведению')),
            ],
            options={
                'verbose_name': 'Ревью пользователя',
                'verbose_name_plural': 'Ревью пользователей',
                'ordering': ['pub_date'],
            },
        ),
        migrations.AddField(
            model_name='genrestitle',
            name='title',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='reviews.Title'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='Введите текст комментария', verbose_name='Текст комментария')),
                ('pub_date', models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='Дата публикации')),
                ('author', models.ForeignKey(help_text='Комментарии автора поста', on_delete=django.db.models.deletion.CASCADE, related_name='author_comments', to=settings.AUTH_USER_MODEL, verbose_name='Комментарии автора')),
                ('review', models.ForeignKey(blank=True, help_text='Комментариии под ревью', on_delete=django.db.models.deletion.CASCADE, related_name='review_comments', to='reviews.Review', verbose_name='Комментарии под ревью')),
            ],
            options={
                'verbose_name': 'Комментарий',
                'verbose_name_plural': 'Комментарии',
                'ordering': ['pub_date'],
            },
        ),
        migrations.AddConstraint(
            model_name='review',
            constraint=models.UniqueConstraint(fields=('title_id', 'author'), name='unuque_review'),
        ),
    ]
